Vue设计思路
### Vue3.0更注重模块化的拆分，在2.0中无法单独使用部分模块，需要引入完整的VUE.JS(例如只想使用响应式部分，但是需要引入完整的Vue.JS),Vue3中模块之间耦合度低，模块可以独立使用拆分模块

###vue2中很多方法挂载到了实例中导致没有使用也会被打包（还有很多组件也是一样）。通过构建工具Tree-shaking机制实现按需引入，减少用户打包体积。重写API

### Vue3允许自定义渲染器，扩展能力强。不会发生以前的事情，改写Vue源码改造渲染方式。扩展更方便

### 依然保留vue2特点

声明式框架
    ### vue2依旧是声明式的框架，用起来简单
    命令式和声明式的区别
    #早在jq的时代编写代码都是命令式的，命令式框架重要特点是关注过程
    #声明式框架更加关注结果。命令式的代码封装到Vue.js中，过程靠vue.js来实现

采用虚拟DOM
    ### 传统更新页面，拼接一个完整的字符串innerHTML全部重新渲染，添加虚拟DOM后，可以比较新旧虚拟节点，找到变化在进行更新。虚拟DOM就是一个对象，用来描述真实DOM

区分编译时和运行时
    ### 我们需要一个虚拟DOM，调用渲染方法将虚拟DOM渲染成真实DOM（缺点就是虚拟DOM编写麻烦）

vue3整体框架
    Monorepo管理项目
    ###Monorepo是管理项目代码的一个方式，指在一个项目仓库（repo）中管理多个模块/包（package）。vue3源码采用monorepo方式进行管理，将模块拆分到package目录中

    #一个仓库可维护多个模块，不用到处找仓库
    #方便版本管理和依赖管理，模块之前的引用，调用都非常方便



